{
  "Severity": "CRITICAL",
  "UpdatedAt": "2025-07-25T14:15:49Z",
  "Package": {
    "Ecosystem": "PIP",
    "Name": "assemblyline-service-client"
  },
  "Advisory": {
    "DatabaseId": 305076,
    "Id": "GSA_kwCzR0hTQS03NWp2LXZmeGYtMzg2Nc4ABKe0",
    "GhsaId": "GHSA-75jv-vfxf-3865",
    "References": [
      {
        "Url": "https://github.com/CybercentreCanada/assemblyline/security/advisories/GHSA-75jv-vfxf-3865"
      },
      {
        "Url": "https://github.com/CybercentreCanada/assemblyline-service-client/commit/351414e7e96cc1f5640ae71ae51b939e8ba30900"
      },
      {
        "Url": "https://github.com/advisories/GHSA-75jv-vfxf-3865"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-75jv-vfxf-3865"
      }
    ],
    "Description": "**Path-Traversal -\u003e Arbitrary File Write in Assemblyline Service Client**\n\n---\n\n## 1. Summary  \nThe Assemblyline 4 **service client** (`task_handler.py`) accepts a SHA-256 value returned by the service **server** and uses it directly as a local file name.  \n\u003e No validation / sanitisation is performed.\n\nA **malicious or compromised server** (or any MITM that can speak to client) can return a path-traversal payload such as  \n`../../../etc/cron.d/evil`  \nand force the client to write the downloaded bytes to an arbitrary location on disk.\n\n---\n\n## 2. Affected Versions  \n| Item | Value |\n|---|---|\n| **Component** | `assemblyline-service-client` |\n| **Repository** | [CybercentreCanada/assemblyline-service-client](https://github.com/CybercentreCanada/assemblyline-service-client) |\n| **Affected** | **All releases up to master branch.**  |\n\n---\n\n## 4. Technical Details\n\n| Field | Content |\n|---|---|\n| **Location** | `assemblyline_service_client/task_handler.py`, inside `download_file()` |\n| **Vulnerable Line** | `file_path = os.path.join(self.tasking_dir, sha256)` |\n| **Root Cause** | The `sha256` string is taken directly from the service-server JSON response and used as a file name without any validation or sanitisation. |\n| **Exploit Flow** | 1. Attacker (service server) returns HTTP 200 for `GET /api/v1/file/../../../etc/cron.d/evil`.\u003cbr\u003e2. Client writes the response body to `/etc/cron.d/evil`.\u003cbr\u003e3. Achieves arbitrary file write (code execution if file is executable). |\n\n---\n\n## 5. Impact  \n- **Integrity** – Overwrite any file writable by the service UID (often root).  \n- **Availability** – Corrupt critical files or exhaust disk space.  \n- **Code Execution** – Drop cron jobs, systemd units, or overwrite binaries.\n\n---\n\n## 6. Mitigation / Fix\n\n```python\nimport re\n\n_SHA256_RE = re.compile(r'^[0-9a-fA-F]{64}\\Z')\n\ndef download_file(self, sha256: str, sid: str) -\u003e Optional[str]:\n    if not _SHA256_RE.fullmatch(sha256):\n        self.log.error(f\"[{sid}] Invalid SHA256: {sha256}\")\n        self.status = STATUSES.ERROR_FOUND\n        return None\n    # or your preferred way to check if a string is a shasum.\n```\n---",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2025-07-25T14:15:48Z",
    "Severity": "CRITICAL",
    "Summary": "Assemblyline 4 service client vulnerable to Arbitrary Write through path traversal in Client code ",
    "UpdatedAt": "2025-07-25T14:15:49Z",
    "WithdrawnAt": "",
    "CVSS": {
      "Score": 10,
      "VectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:H"
    }
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "4.6.1.dev138"
      },
      "VulnerableVersionRange": "\u003e= 4.6.1.dev0, \u003c 4.6.1.dev138"
    },
    {
      "FirstPatchedVersion": {
        "Identifier": "4.6.0.stable11"
      },
      "VulnerableVersionRange": "\u003c 4.6.0.stable11"
    }
  ]
}