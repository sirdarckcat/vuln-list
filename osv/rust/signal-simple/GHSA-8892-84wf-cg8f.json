{
  "id": "GHSA-8892-84wf-cg8f",
  "modified": "2022-06-14T20:53:18Z",
  "published": "2021-08-25T21:00:16Z",
  "summary": "SyncChannel\u003cT\u003e can move 'T: !Send' to other threads",
  "details": "Affected versions of this crate unconditionally implement Send/Sync for `SyncChannel\u003cT\u003e`.\n`SyncChannel\u003cT\u003e` doesn't provide access to `\u0026T` but merely serves as a channel that consumes and returns owned `T`.\n\nUsers can create UB in safe Rust by sending `T: !Send` to other threads with `SyncChannel::send/recv` APIs. Using `T = Arc\u003cCell\u003c_\u003e` allows to create data races (which can lead to memory corruption), and using `T = MutexGuard\u003cT\u003e` allows to unlock a mutex from a thread that didn't lock the mutex.\n",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "signal-simple",
        "purl": "pkg:cargo/signal-simple"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {}
          ]
        }
      ],
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2021/08/GHSA-8892-84wf-cg8f/GHSA-8892-84wf-cg8f.json"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/kitsuneninetails/signal-rust/issues/2"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/kitsuneninetails/signal-rust/"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0126.html"
    }
  ]
}